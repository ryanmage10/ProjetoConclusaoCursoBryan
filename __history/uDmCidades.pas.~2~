unit uDmCidades;

interface

uses
  System.SysUtils, System.Classes, Data.FMTBcd, Data.DB, Data.SqlExpr, uDmConexao,
  Datasnap.DBClient, Datasnap.Provider, uDmEstados, uEstados, uCidades;

type
  TDmCidades = class(TDataModule)
    sqlPesquisar: TSQLDataSet;
    sqlInserir: TSQLDataSet;
    sqlAlterar: TSQLDataSet;
    sqlExcluir: TSQLDataSet;
    dspCidades: TDataSetProvider;
    cdsCidades: TClientDataSet;
    sqlRecuperar: TSQLDataSet;
    procedure DataModuleCreate(Sender: TObject);
    procedure DataModuleDestroy(Sender: TObject);
  private
    { Private declarations }
    procedure FieldToObj(var oCidade : TCidades; sql: TSqlDataSet);
    procedure ObjToField(oCidade : TCidades; var sql: TSqlDataSet);
  public
    { Public declarations }
    function gerarId: integer;
    procedure Pesquisar(Value: string; var Dset: TClientDataSet);
    function Recuperar(Var oCidade: TCidades; out sErro:string): boolean;
    function inserir(oCidade: TCidades; out sErro: string): boolean;
    function Alterar(oCidade: TCidades; out sErro: string): boolean;
    function Excluir(oCidade: TCidades; var sErro: string):Boolean;

  end;

var
  DmCidades: TDmCidades;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDmCidades }



function TDmCidades.Alterar(oCidade: TCidades; out sErro: string): boolean;
begin
with sqlAlterar, OCidade do
  begin
    // ObjToField(oCidade, sqlAlterar);
     try
        Params[0].AsString := Nome;
        Params[1].AsString := DDD;
        Params[2].AsString := inttoStr(Estado.Id);
        Params[3].AsString := user_insert;
        Params[4].AsString := user_update;
        Params[7].AsInteger := Id;
        ExecSql();
        result := true;
     except on E:Exception do
       begin
          sErro := 'Ocorreu um erro ao Alterar a Cidade' + E.Message;
          result := False;
       end;
     end;
  end;
end;

procedure TDmCidades.DataModuleCreate(Sender: TObject);
begin
   DmEstados:= TDmEstados.Create(nil);
end;

procedure TDmCidades.DataModuleDestroy(Sender: TObject);
begin
   FreeandNil(DmEstados);
end;

function TDmCidades.Excluir(oCidade: TCidades; var sErro: string): Boolean;
begin
  try
    with SqlExcluir do
    begin
      paramByName('id').AsInteger := oCidade.Id;
      ExecSql();
      result := true;
    end;
  except on E: Exception do
    begin
      sErro := 'Erro ao Excluir Cidade' + E.Message;
      result := False;
    end;
  end;
end;

procedure TDmCidades.FieldToObj(var oCidade: TCidades; sql: TSqlDataSet);
begin
  with oCidade, Sql do
  begin
    Id := FieldByName('id').AsInteger;
    Nome := FieldByName('CIDADE').AsString;
    DDD := FieldByName('DDD').AsString;
    Estado.ID := FieldByName('id_estados').AsInteger;
    //DataCad := FieldByName('date_insert').AsDatetime;
    //DataUltAlt := FieldByName('date_update').AsDatetime;
    User_Insert := FieldByName('User_Insert').AsString;
    User_Update := FieldByName('User_Update').AsString;
  end;
end;

function TDmCidades.gerarId: integer;
var sqlSeq : TSqlDataset;
begin
   sqlSeq := TSqlDataset .create(nil);
   with sqlSeq do
   begin
     try
       SQLConnection := DmConexao.sqlConBanco;
       CommandText := 'select id from cidades where id = (select max(id) from cidades)';
       open;
       if not isEmpty then
          result := FieldByName('id').AsInteger + 1
       else
          result := 1;
       close;
     finally
       freeandnil(sqlseq);
     end;
   end;
end;

function TDmCidades.inserir(oCidade: TCidades; out sErro: string): boolean;
begin
  with sqlinserir, OCidade do
  begin
     //ObjToField(oCidade, sqlInserir);
     try
        Params[0].AsInteger := GerarId;
        Params[1].AsString := Nome;
        Params[2].AsString := DDD;
        Params[3].AsString := inttoStr(Estado.Id);
        Params[4].AsString := user_insert;
        Params[5].AsString := user_update;
        ExecSql();
        result := true;
     except on E:Exception do
       begin
          sErro := 'Ocorreu um erro ao inserir a Cidade' + E.Message;
          result := False;
       end;
     end;
  end;
end;

procedure TDmCidades.ObjToField(oCidade: TCidades; var sql: TSQLDataSet);
begin
  with oCidade, Sql do
  begin
    ParamByName('id').AsInteger := Id;
    ParamByName('nome').AsString := Nome;
    ParamByName('DDD').AsString := DDD;
    ParamByName('id_estados').AsInteger := Estado.ID;
    ParamByName('date_insert').AsDatetime := DataCad;
    ParamByName('date_update').AsDatetime := DataUltAlt;
    ParamByName('User_Insert').AsString := User_Insert;
    ParamByName('User_Update').AsString := User_Update;
  end;
end;

procedure TDmCidades.Pesquisar(Value: string; var Dset: TClientDataSet);
begin
  with sqlPesquisar do
  begin
    //Dset.Close;
    //Dset.ProviderName := 'dspCidades';
    //Dset.Open;
    dset.EmptyDataSet;
    if Value = '' then
    begin
      CommandText := 'SELECT C.ID, C.CIDADE, E.ESTADO, c.DATE_INSERT  FROM CIDADES as C LEFT JOIN ESTADOS as E ON C.ID_ESTADOS = E.ID';
    end
    else
    begin
      CommandText := 'SELECT C.ID, C.CIDADE, E.ESTADO, c.DATE_INSERT  FROM CIDADES AS C LEFT JOIN ESTADOS AS E ON C.ID_ESTADOS = E.ID WHERE CIDADE LIKE :NOME';
      ParambyName('NOME').AsString := '%' + Value + '%';
    end;
    open;
    while not eof do
    begin
      dset.append;
      Dset.FieldByName('id').AsInteger := FieldByName('id').AsInteger;
      Dset.FieldByName('Estado').AsString := FieldByName('ESTADO').AsString;
      Dset.FieldByName('cidade').AsString := FieldByName('CIDADE').AsString;
      //Dset.FieldByName('data_insert').AsDateTime := FieldByName('Data_insert').AsDateTime;
      Dset.Post;
      Next;
    end;
    close;
  end;
end;

function TDmCidades.Recuperar(var oCidade: TCidades; out sErro: string): boolean;
var Estado: TEstados;
begin
  try
    Estado := TEstados.Create;
    with SqlRecuperar do
    begin
      paramByName('id').AsInteger := oCidade.Id;
      open;
      FieldtoObj(oCidade, sqlRecuperar);
      Estado.id := FieldByName('id_estados').AsInteger;
      close;

      DmEstados.Recuperar(Estado, sErro);
      oCidade.Estado := Estado.clone;
      result := true;
    end;
    Estado.Free;
  except on E: Exception do
    begin
      sErro := 'Erro ao recuperar Cidade' + E.Message;
      result := False;
    end;
  end;

end;

end.
