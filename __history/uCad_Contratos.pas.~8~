unit uCad_Contratos;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uCad_Base, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.Mask, uContratos, uContratosController, uCons_Empresas, uCons_Clientes, uCons_Fornecedores;

type
  TCad_Contratos = class(TCad_Base)
    lbl_CodDoc: TLabel;
    lbl_Descricao: TLabel;
    lbl_Moeda: TLabel;
    lbl_Cliente_Fornecedor: TLabel;
    lbl_Empresa: TLabel;
    edt_CodDoc: TEdit;
    edt_Descricao: TEdit;
    edt_Moeda: TEdit;
    Edt_Cliente_Fornecedor: TEdit;
    edt_Empresa: TEdit;
    lbl_Valor: TLabel;
    btn_CliFor: TButton;
    btn_Pesquisar: TButton;
    edt_Valor: TMaskEdit;
    rg_Tipo: TRadioGroup;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure rg_TipoClick(Sender: TObject);
    procedure btn_PesquisarClick(Sender: TObject);
    procedure btn_SalvarClick(Sender: TObject);
  private
    { Private declarations }
    procedure popularInterface;
    procedure PopularObjeto;
    function ValidarDados: boolean;
    procedure AlterarCampos;
  public
    { Public declarations }
    Contrato : TContratos;
    ContratosControl: TContratosController;
  end;

var
  Cad_Contratos: TCad_Contratos;

implementation

{$R *.dfm}

procedure TCad_Contratos.AlterarCampos;
begin
  if Rg_tipo.ItemIndex = 0 then
  begin
    Contrato.Tipo := TpReceber;
    Contrato.Fornecedor.LimparDados;
    lbl_cliente_fornecedor.Caption := 'Cliente';
  end
  else
  begin
    Contrato.Tipo := TpPagar;
    Contrato.Cliente.LimparDados;
    lbl_cliente_fornecedor.Caption := 'Fornecedor';
  end;
end;

procedure TCad_Contratos.btn_PesquisarClick(Sender: TObject);
var ConsEmpresaForm: TCons_Empresas;
begin
   ConsEmpresaForm := TCons_Empresas.Create(nil);
   try
      ConsEmpresaForm.Selecao := True;
      ConsEmpresaForm.ShowModal;
      Contrato.Empresa := (ConsEmpresaForm.Empresa.clone);
      edt_Empresa.text := Contrato.Empresa.Nome;
   finally
      FreeAndNil(ConsEmpresaForm);
   end;
end;

procedure TCad_Contratos.btn_SalvarClick(Sender: TObject);
begin
  if ValidarDados then
  begin
    popularObjeto;

    if not ContratosControl.VerificarNome(Contrato) then
     begin
        if Inclusao then
           ContratosControl.Inserir(Contrato)
        else
          ContratosControl.Alterar(Contrato);

        self.Close;
     end
     else
      raise Exception.Create('Já Existe um Contrato cadastrado com esse Numero de documento');
  end;
end;

procedure TCad_Contratos.FormCreate(Sender: TObject);
begin
  inherited;
  Contrato := TContratos.Create;
  ContratosControl:= TContratosController.Create;
end;

procedure TCad_Contratos.FormDestroy(Sender: TObject);
begin
  inherited;
  Contrato.Free;
  ContratosControl.Free;
end;

procedure TCad_Contratos.FormShow(Sender: TObject);
begin
  inherited;
  if not inclusao then
    popularInterface;
end;

procedure TCad_Contratos.popularInterface;
begin
  edt_id.text := inttostr(Contrato.ID);
  edt_coddoc.text := Contrato.codigodoc;
  edt_descricao.text := Contrato.Descricao;
  edt_moeda.text := Contrato.Moeda;
  edt_Empresa.text := Contrato.Empresa.Nome;
  rg_tipo.ItemIndex := Integer(Contrato.tipo);
  edt_valor.text := CurrToStr(Contrato.Valor);
  if rg_tipo.ItemIndex = 0 then
     Edt_Cliente_Fornecedor.Text := Contrato.Cliente.Nome
  else
     Edt_Cliente_Fornecedor.Text := Contrato.Fornecedor.Nome;

  lbl_Cad.Visible := True;
  lbl_DataCad.Visible := True;
  lbl_DataCad.Caption := Contrato.User_Insert + '-' + DatetoStr(Contrato.DataCad);

  lbl_DataAlt.Caption := Contrato.User_Update + '-' + DatetoStr(Contrato.DataUltAlt);
  Lbl_Alt.Visible := True;
  lbl_DataAlt.Visible := True;
end;

procedure TCad_Contratos.PopularObjeto;
begin

end;

procedure TCad_Contratos.rg_TipoClick(Sender: TObject);
begin
  inherited;
  AlterarCampos;
end;

function TCad_Contratos.ValidarDados: boolean;
begin

end;

end.
