unit uContratos;

interface

uses
  uBase, uFornecedores, uClientes, uEmpresas;

type
  TContratos = class(TBase)
  protected
    FDescricao: string[50];
    FMoeda: string[2];
    FEmpresa: TEmpresas;
    FCliente: TClientes;
    FFornecedor: TFornecedores;
    FValor: Currency;

    procedure SetDescricao(Value: string);
    procedure SetMoeda(Value: string);
    procedure SetEmpresa(Value: TEmpresas);
    procedure SetCliente(Value: TClientes);
    procedure SetFornecedor(Value: TFornecedores);
    procedure SetValor(Value: Currency);
    function GetDescricao: string;
    function GetMoeda: string;
    function GetEmpresa: TEmpresas;
    function GetCliente: TClientes;
    function GetFornecedor: TFornecedores;
    function GetValor: Currency;

  public

    property Descricao: string read GetDescricao write SetDescricao;
    property Moeda: string read GetMoeda write SetMoeda;
    property Empresa: TEmpresas read GetEmpresa write SetEmpresa;
    property Cliente: TClientes read GetCliente write SetCliente;
    property Fornecedor: TFornecedores read GetFornecedor write SetFornecedor;
    property Valor: Currency read GetValor write SetValor;

    constructor Create;
    destructor Free;
    function clone: TContratos;
    procedure LimparDados;
    procedure CopiarDados(Value: TContratos);
  end;


implementation

{ TContratos }

function TContratos.clone: TContratos;
begin
  result := TContratos.Create;
  result.CopiarDados(Self);
end;

procedure TContratos.CopiarDados(Value: TContratos);
begin
   inherited CopiarDados(Value);
    FDescricao := Value.Descricao;
    FMoeda := Value.Moeda;
    FEmpresa.CopiarDados(Value.Empresa);
    FCliente.CopiarDados(Value.Cliente);
    FFornecedor.CopiarDados(Value.Fornecedor);
    FValor := Value.Valor;
end;

constructor TContratos.Create;
begin
  inherited;
  FEmpresa := TEmpresas.Create;
  FCliente := TClientes.Create;
  FFornecedor := TFornecedores.Create;
  LimparDados;
end;

destructor TContratos.Free;
begin
  inherited;
  FEmpresa.Free;
  FCliente.Free;
  FFornecedor.Free;
end;

function TContratos.GetCliente: TClientes;
begin

end;

function TContratos.GetDescricao: string;
begin

end;

function TContratos.GetEmpresa: TEmpresas;
begin

end;

function TContratos.GetFornecedor: TFornecedores;
begin

end;

function TContratos.GetMoeda: string;
begin

end;

function TContratos.GetValor: Currency;
begin

end;

procedure TContratos.LimparDados;
begin

end;

procedure TContratos.SetCliente(Value: TClientes);
begin

end;

procedure TContratos.SetDescricao(Value: string);
begin

end;

procedure TContratos.SetEmpresa(Value: TEmpresas);
begin

end;

procedure TContratos.SetFornecedor(Value: TFornecedores);
begin

end;

procedure TContratos.SetMoeda(Value: string);
begin

end;

procedure TContratos.SetValor(Value: Currency);
begin

end;

end.
